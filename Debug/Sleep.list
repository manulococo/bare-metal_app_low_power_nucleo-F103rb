
Sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002164  08002164  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002164  08002164  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002164  08002164  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800216c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080021d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080021d4  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073fb  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e9  00000000  00000000  000274cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00028bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000599  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179f5  00000000  00000000  000298c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c40  00000000  00000000  000412b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000840c7  00000000  00000000  00049ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022b4  00000000  00000000  000cdfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000d0274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f8 	.word	0x080020f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080020f8 	.word	0x080020f8

0800014c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13)
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800015c:	d104      	bne.n	8000168 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		SystemClock_Config();
 800015e:	f000 f82e 	bl	80001be <SystemClock_Config>
		printf("Vengo de STOP MODE\n");
 8000162:	4809      	ldr	r0, [pc, #36]	; (8000188 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000164:	f001 fc3a 	bl	80019dc <puts>
	}
	if (GPIO_Pin == GPIO_PIN_10)
 8000168:	88fb      	ldrh	r3, [r7, #6]
 800016a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800016e:	d102      	bne.n	8000176 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		printf("Vengo de SLEEP MODE\n");
 8000170:	4806      	ldr	r0, [pc, #24]	; (800018c <HAL_GPIO_EXTI_Callback+0x40>)
 8000172:	f001 fc33 	bl	80019dc <puts>
	}
	HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8000176:	2120      	movs	r1, #32
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <HAL_GPIO_EXTI_Callback+0x44>)
 800017a:	f000 fd95 	bl	8000ca8 <HAL_GPIO_TogglePin>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	08002110 	.word	0x08002110
 800018c:	08002124 	.word	0x08002124
 8000190:	40010800 	.word	0x40010800

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 fa7a 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f80f 	bl	80001be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 f878 	bl	8000294 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a4:	f000 f84c 	bl	8000240 <MX_USART2_UART_Init>
  }
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
  HAL_PWR_EnterSTANDBYMode();
*/
  HAL_PWR_EnableSleepOnExit();
 80001a8:	f000 fe06 	bl	8000db8 <HAL_PWR_EnableSleepOnExit>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,  PWR_SLEEPENTRY_WFI);
 80001ac:	2101      	movs	r1, #1
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fdb4 	bl	8000d1c <HAL_PWR_EnterSLEEPMode>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80001b4:	2101      	movs	r1, #1
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 fdcc 	bl	8000d54 <HAL_PWR_EnterSTOPMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x28>

080001be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	b090      	sub	sp, #64	; 0x40
 80001c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	2228      	movs	r2, #40	; 0x28
 80001ca:	2100      	movs	r1, #0
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 fce5 	bl	8001b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e8:	2310      	movs	r3, #16
 80001ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2302      	movs	r3, #2
 80001ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f0:	2300      	movs	r3, #0
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fde8 	bl	8000dd4 <HAL_RCC_OscConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800020a:	f000 f8cd 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020e:	230f      	movs	r3, #15
 8000210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000212:	2302      	movs	r3, #2
 8000214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2102      	movs	r1, #2
 8000228:	4618      	mov	r0, r3
 800022a:	f001 f855 	bl	80012d8 <HAL_RCC_ClockConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000234:	f000 f8b8 	bl	80003a8 <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3740      	adds	r7, #64	; 0x40
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000246:	4a12      	ldr	r2, [pc, #72]	; (8000290 <MX_USART2_UART_Init+0x50>)
 8000248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_USART2_UART_Init+0x4c>)
 800024c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_USART2_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000266:	220c      	movs	r2, #12
 8000268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <MX_USART2_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000276:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_USART2_UART_Init+0x4c>)
 8000278:	f001 f9bc 	bl	80015f4 <HAL_UART_Init>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000282:	f000 f891 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000084 	.word	0x20000084
 8000290:	40004400 	.word	0x40004400

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a8:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <MX_GPIO_Init+0x100>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a39      	ldr	r2, [pc, #228]	; (8000394 <MX_GPIO_Init+0x100>)
 80002ae:	f043 0310 	orr.w	r3, r3, #16
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <MX_GPIO_Init+0x100>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <MX_GPIO_Init+0x100>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a33      	ldr	r2, [pc, #204]	; (8000394 <MX_GPIO_Init+0x100>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b31      	ldr	r3, [pc, #196]	; (8000394 <MX_GPIO_Init+0x100>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <MX_GPIO_Init+0x100>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <MX_GPIO_Init+0x100>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <MX_GPIO_Init+0x100>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b28      	ldr	r3, [pc, #160]	; (8000394 <MX_GPIO_Init+0x100>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a27      	ldr	r2, [pc, #156]	; (8000394 <MX_GPIO_Init+0x100>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_GPIO_Init+0x100>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4822      	ldr	r0, [pc, #136]	; (8000398 <MX_GPIO_Init+0x104>)
 800030e:	f000 fcb3 	bl	8000c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8000312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <MX_GPIO_Init+0x108>)
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	481e      	ldr	r0, [pc, #120]	; (80003a0 <MX_GPIO_Init+0x10c>)
 8000328:	f000 fb22 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON3_Pin */
  GPIO_InitStruct.Pin = BOTON3_Pin;
 800032c:	2301      	movs	r3, #1
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_GPIO_Init+0x110>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON3_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x104>)
 8000340:	f000 fb16 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2302      	movs	r3, #2
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	480f      	ldr	r0, [pc, #60]	; (8000398 <MX_GPIO_Init+0x104>)
 800035c:	f000 fb08 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON2_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin;
 8000360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <MX_GPIO_Init+0x108>)
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON2_GPIO_Port, &GPIO_InitStruct);
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	4808      	ldr	r0, [pc, #32]	; (8000398 <MX_GPIO_Init+0x104>)
 8000376:	f000 fafb 	bl	8000970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	2028      	movs	r0, #40	; 0x28
 8000380:	f000 fabf 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000384:	2028      	movs	r0, #40	; 0x28
 8000386:	f000 fad8 	bl	800093a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010800 	.word	0x40010800
 800039c:	10210000 	.word	0x10210000
 80003a0:	40011000 	.word	0x40011000
 80003a4:	10110000 	.word	0x10110000

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <HAL_UART_MspInit+0x70>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d123      	bne.n	8000480 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <HAL_UART_MspInit+0x74>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <HAL_UART_MspInit+0x74>)
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000442:	61d3      	str	r3, [r2, #28]
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_UART_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_UART_MspInit+0x74>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <HAL_UART_MspInit+0x74>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_UART_MspInit+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000468:	230c      	movs	r3, #12
 800046a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046c:	2302      	movs	r3, #2
 800046e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <HAL_UART_MspInit+0x78>)
 800047c:	f000 fa78 	bl	8000970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40004400 	.word	0x40004400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000498:	e7fe      	b.n	8000498 <NMI_Handler+0x4>

0800049a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <MemManage_Handler+0x4>

080004a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <BusFault_Handler+0x4>

080004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler+0x4>

080004b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004da:	f000 f91f 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON2_Pin);
 80004e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004ea:	f000 fbf7 	bl	8000cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80004ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004f2:	f000 fbf3 	bl	8000cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e00a      	b.n	8000522 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800050c:	f3af 8000 	nop.w
 8000510:	4601      	mov	r1, r0
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	60ba      	str	r2, [r7, #8]
 8000518:	b2ca      	uxtb	r2, r1
 800051a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3301      	adds	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	dbf0      	blt.n	800050c <_read+0x12>
  }

  return len;
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	e009      	b.n	800055a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	60ba      	str	r2, [r7, #8]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf1      	blt.n	8000546 <_write+0x12>
  }
  return len;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_close>:

int _close(int file)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000592:	605a      	str	r2, [r3, #4]
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_isatty>:

int _isatty(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f001 fb1c 	bl	8001c38 <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20005000 	.word	0x20005000
 800062c:	00000400 	.word	0x00000400
 8000630:	200000cc 	.word	0x200000cc
 8000634:	20000220 	.word	0x20000220

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff fff8 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064a:	490c      	ldr	r1, [pc, #48]	; (800067c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000660:	4c09      	ldr	r4, [pc, #36]	; (8000688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 fae9 	bl	8001c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fd8f 	bl	8000194 <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000680:	0800216c 	.word	0x0800216c
  ldr r2, =_sbss
 8000684:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000688:	20000220 	.word	0x20000220

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f923 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fe82 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f93b 	bl	8000956 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f903 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	200000d0 	.word	0x200000d0

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200000d0 	.word	0x200000d0

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff2d 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff42 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff35 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa2 	bl	80008a8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b08b      	sub	sp, #44	; 0x2c
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e169      	b.n	8000c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000984:	2201      	movs	r2, #1
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	429a      	cmp	r2, r3
 800099e:	f040 8158 	bne.w	8000c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4a9a      	ldr	r2, [pc, #616]	; (8000c10 <HAL_GPIO_Init+0x2a0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d05e      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009ac:	4a98      	ldr	r2, [pc, #608]	; (8000c10 <HAL_GPIO_Init+0x2a0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d875      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009b2:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <HAL_GPIO_Init+0x2a4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d058      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009b8:	4a96      	ldr	r2, [pc, #600]	; (8000c14 <HAL_GPIO_Init+0x2a4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d86f      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009be:	4a96      	ldr	r2, [pc, #600]	; (8000c18 <HAL_GPIO_Init+0x2a8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d052      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009c4:	4a94      	ldr	r2, [pc, #592]	; (8000c18 <HAL_GPIO_Init+0x2a8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d869      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009ca:	4a94      	ldr	r2, [pc, #592]	; (8000c1c <HAL_GPIO_Init+0x2ac>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d04c      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009d0:	4a92      	ldr	r2, [pc, #584]	; (8000c1c <HAL_GPIO_Init+0x2ac>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d863      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009d6:	4a92      	ldr	r2, [pc, #584]	; (8000c20 <HAL_GPIO_Init+0x2b0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d046      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
 80009dc:	4a90      	ldr	r2, [pc, #576]	; (8000c20 <HAL_GPIO_Init+0x2b0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d85d      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009e2:	2b12      	cmp	r3, #18
 80009e4:	d82a      	bhi.n	8000a3c <HAL_GPIO_Init+0xcc>
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d859      	bhi.n	8000a9e <HAL_GPIO_Init+0x12e>
 80009ea:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <HAL_GPIO_Init+0x80>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a6b 	.word	0x08000a6b
 80009f4:	08000a45 	.word	0x08000a45
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a99 	.word	0x08000a99
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a9f 	.word	0x08000a9f
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a4d 	.word	0x08000a4d
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	4a79      	ldr	r2, [pc, #484]	; (8000c24 <HAL_GPIO_Init+0x2b4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a42:	e02c      	b.n	8000a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e029      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e024      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e01f      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	330c      	adds	r3, #12
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e01a      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a72:	2304      	movs	r3, #4
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e013      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d105      	bne.n	8000a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	611a      	str	r2, [r3, #16]
          break;
 8000a8a:	e009      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	615a      	str	r2, [r3, #20]
          break;
 8000a96:	e003      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x130>
          break;
 8000a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d801      	bhi.n	8000aaa <HAL_GPIO_Init+0x13a>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	e001      	b.n	8000aae <HAL_GPIO_Init+0x13e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3304      	adds	r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	; 0xff
 8000ab4:	d802      	bhi.n	8000abc <HAL_GPIO_Init+0x14c>
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	e002      	b.n	8000ac2 <HAL_GPIO_Init+0x152>
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	3b08      	subs	r3, #8
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	210f      	movs	r1, #15
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	6a39      	ldr	r1, [r7, #32]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	431a      	orrs	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 80b1 	beq.w	8000c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af0:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a4c      	ldr	r2, [pc, #304]	; (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <HAL_GPIO_Init+0x2b8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b08:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <HAL_GPIO_Init+0x2bc>)
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a40      	ldr	r2, [pc, #256]	; (8000c30 <HAL_GPIO_Init+0x2c0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1ec>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3f      	ldr	r2, [pc, #252]	; (8000c34 <HAL_GPIO_Init+0x2c4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1e8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	; (8000c38 <HAL_GPIO_Init+0x2c8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <HAL_GPIO_Init+0x2cc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1e0>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6e:	492f      	ldr	r1, [pc, #188]	; (8000c2c <HAL_GPIO_Init+0x2bc>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	492c      	ldr	r1, [pc, #176]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	608b      	str	r3, [r1, #8]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4928      	ldr	r1, [pc, #160]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	4922      	ldr	r1, [pc, #136]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60cb      	str	r3, [r1, #12]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	491e      	ldr	r1, [pc, #120]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4918      	ldr	r1, [pc, #96]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4914      	ldr	r1, [pc, #80]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d021      	beq.n	8000c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	490e      	ldr	r1, [pc, #56]	; (8000c40 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	e021      	b.n	8000c52 <HAL_GPIO_Init+0x2e2>
 8000c0e:	bf00      	nop
 8000c10:	10320000 	.word	0x10320000
 8000c14:	10310000 	.word	0x10310000
 8000c18:	10220000 	.word	0x10220000
 8000c1c:	10210000 	.word	0x10210000
 8000c20:	10120000 	.word	0x10120000
 8000c24:	10110000 	.word	0x10110000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40011400 	.word	0x40011400
 8000c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_GPIO_Init+0x304>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4909      	ldr	r1, [pc, #36]	; (8000c74 <HAL_GPIO_Init+0x304>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	3301      	adds	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f47f ae8e 	bne.w	8000984 <HAL_GPIO_Init+0x14>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	372c      	adds	r7, #44	; 0x2c
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40010400 	.word	0x40010400

08000c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
 8000c84:	4613      	mov	r3, r2
 8000c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c94:	e003      	b.n	8000c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	041a      	lsls	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	611a      	str	r2, [r3, #16]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	041a      	lsls	r2, r3, #16
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43d9      	mvns	r1, r3
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	400b      	ands	r3, r1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce8:	695a      	ldr	r2, [r3, #20]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa26 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010400 	.word	0x40010400

08000d0c <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8000d10:	bf20      	wfe
  __asm volatile( "nop" );
 8000d12:	bf00      	nop
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000d2e:	f023 0304 	bic.w	r3, r3, #4
 8000d32:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000d3a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000d3c:	e002      	b.n	8000d44 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8000d3e:	bf40      	sev
    __WFE();
 8000d40:	bf20      	wfe
    __WFE();
 8000d42:	bf20      	wfe
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000d66:	f023 0302 	bic.w	r3, r3, #2
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 0201 	bic.w	r2, r3, #1
 8000d74:	490e      	ldr	r1, [pc, #56]	; (8000db0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_PWR_EnterSTOPMode+0x60>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_PWR_EnterSTOPMode+0x60>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d101      	bne.n	8000d92 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000d8e:	bf30      	wfi
 8000d90:	e004      	b.n	8000d9c <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000d92:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000d94:	f7ff ffba 	bl	8000d0c <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000d98:	f7ff ffb8 	bl	8000d0c <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_PWR_EnterSTOPMode+0x60>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_PWR_EnterSTOPMode+0x60>)
 8000da2:	f023 0304 	bic.w	r3, r3, #4
 8000da6:	6113      	str	r3, [r2, #16]
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40007000 	.word	0x40007000
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_PWR_EnableSleepOnExit+0x18>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_PWR_EnableSleepOnExit+0x18>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6113      	str	r3, [r2, #16]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e272      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8087 	beq.w	8000f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df4:	4b92      	ldr	r3, [pc, #584]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d00c      	beq.n	8000e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e00:	4b8f      	ldr	r3, [pc, #572]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d112      	bne.n	8000e32 <HAL_RCC_OscConfig+0x5e>
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e18:	d10b      	bne.n	8000e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1a:	4b89      	ldr	r3, [pc, #548]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d06c      	beq.n	8000f00 <HAL_RCC_OscConfig+0x12c>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d168      	bne.n	8000f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e24c      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3a:	d106      	bne.n	8000e4a <HAL_RCC_OscConfig+0x76>
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a7f      	ldr	r2, [pc, #508]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	e02e      	b.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x98>
 8000e52:	4b7b      	ldr	r3, [pc, #492]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7a      	ldr	r2, [pc, #488]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	4b78      	ldr	r3, [pc, #480]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a77      	ldr	r2, [pc, #476]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e01d      	b.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0xbc>
 8000e76:	4b72      	ldr	r3, [pc, #456]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a71      	ldr	r2, [pc, #452]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a6e      	ldr	r2, [pc, #440]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e90:	4b6b      	ldr	r3, [pc, #428]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a6a      	ldr	r2, [pc, #424]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b68      	ldr	r3, [pc, #416]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a67      	ldr	r2, [pc, #412]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d013      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc46 	bl	8000740 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fc42 	bl	8000740 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e200      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0xe4>
 8000ed6:	e014      	b.n	8000f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc32 	bl	8000740 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc2e 	bl	8000740 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e1ec      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x10c>
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d063      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00b      	beq.n	8000f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d11c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x18c>
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d116      	bne.n	8000f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	4b43      	ldr	r3, [pc, #268]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <HAL_RCC_OscConfig+0x176>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e1c0      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4939      	ldr	r1, [pc, #228]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5e:	e03a      	b.n	8000fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d020      	beq.n	8000faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fbe7 	bl	8000740 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f76:	f7ff fbe3 	bl	8000740 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e1a1      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4927      	ldr	r1, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
 8000fa8:	e015      	b.n	8000fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_RCC_OscConfig+0x270>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fbc6 	bl	8000740 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fbc2 	bl	8000740 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e180      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d03a      	beq.n	8001058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d019      	beq.n	800101e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_RCC_OscConfig+0x274>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fba6 	bl	8000740 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fba2 	bl	8000740 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e160      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_RCC_OscConfig+0x26c>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f000 face 	bl	80015b8 <RCC_Delay>
 800101c:	e01c      	b.n	8001058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_RCC_OscConfig+0x274>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001024:	f7ff fb8c 	bl	8000740 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102a:	e00f      	b.n	800104c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fb88 	bl	8000740 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d908      	bls.n	800104c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e146      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	42420000 	.word	0x42420000
 8001048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104c:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e9      	bne.n	800102c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80a6 	beq.w	80011b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106a:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10d      	bne.n	8001092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b88      	ldr	r3, [pc, #544]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a87      	ldr	r2, [pc, #540]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b85      	ldr	r3, [pc, #532]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800108e:	2301      	movs	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	4b82      	ldr	r3, [pc, #520]	; (800129c <HAL_RCC_OscConfig+0x4c8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109e:	4b7f      	ldr	r3, [pc, #508]	; (800129c <HAL_RCC_OscConfig+0x4c8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a7e      	ldr	r2, [pc, #504]	; (800129c <HAL_RCC_OscConfig+0x4c8>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb49 	bl	8000740 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b2:	f7ff fb45 	bl	8000740 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b64      	cmp	r3, #100	; 0x64
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e103      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c4:	4b75      	ldr	r3, [pc, #468]	; (800129c <HAL_RCC_OscConfig+0x4c8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d106      	bne.n	80010e6 <HAL_RCC_OscConfig+0x312>
 80010d8:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6213      	str	r3, [r2, #32]
 80010e4:	e02d      	b.n	8001142 <HAL_RCC_OscConfig+0x36e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x334>
 80010ee:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a69      	ldr	r2, [pc, #420]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a66      	ldr	r2, [pc, #408]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	6213      	str	r3, [r2, #32]
 8001106:	e01c      	b.n	8001142 <HAL_RCC_OscConfig+0x36e>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b05      	cmp	r3, #5
 800110e:	d10c      	bne.n	800112a <HAL_RCC_OscConfig+0x356>
 8001110:	4b61      	ldr	r3, [pc, #388]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6213      	str	r3, [r2, #32]
 8001128:	e00b      	b.n	8001142 <HAL_RCC_OscConfig+0x36e>
 800112a:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a5a      	ldr	r2, [pc, #360]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	4b58      	ldr	r3, [pc, #352]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a57      	ldr	r2, [pc, #348]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d015      	beq.n	8001176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff faf9 	bl	8000740 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff faf5 	bl	8000740 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0b1      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001168:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0ee      	beq.n	8001152 <HAL_RCC_OscConfig+0x37e>
 8001174:	e014      	b.n	80011a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff fae3 	bl	8000740 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	e00a      	b.n	8001194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fadf 	bl	8000740 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e09b      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1ee      	bne.n	800117e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d105      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8087 	beq.w	80012ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d061      	beq.n	800128c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d146      	bne.n	800125e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <HAL_RCC_OscConfig+0x4cc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fab3 	bl	8000740 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff faaf 	bl	8000740 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e06d      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d108      	bne.n	8001218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4921      	ldr	r1, [pc, #132]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a19      	ldr	r1, [r3, #32]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	430b      	orrs	r3, r1
 800122a:	491b      	ldr	r1, [pc, #108]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x4cc>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fa83 	bl	8000740 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fa7f 	bl	8000740 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e03d      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x46a>
 800125c:	e035      	b.n	80012ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_RCC_OscConfig+0x4cc>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fa6c 	bl	8000740 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fa68 	bl	8000740 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e026      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x498>
 800128a:	e01e      	b.n	80012ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e019      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
 8001298:	40021000 	.word	0x40021000
 800129c:	40007000 	.word	0x40007000
 80012a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_OscConfig+0x500>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0d0      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d910      	bls.n	800131c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 0207 	bic.w	r2, r3, #7
 8001302:	4965      	ldr	r1, [pc, #404]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0b8      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800133e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4b50      	ldr	r3, [pc, #320]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	494d      	ldr	r1, [pc, #308]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d040      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e07f      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e073      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06b      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f023 0203 	bic.w	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c8:	f7ff f9ba 	bl	8000740 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d0:	f7ff f9b6 	bl	8000740 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e053      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 020c 	and.w	r2, r3, #12
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d1eb      	bne.n	80013d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d210      	bcs.n	8001428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	4922      	ldr	r1, [pc, #136]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e032      	b.n	800148e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4916      	ldr	r1, [pc, #88]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	490e      	ldr	r1, [pc, #56]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001466:	f000 f821 	bl	80014ac <HAL_RCC_GetSysClockFreq>
 800146a:	4602      	mov	r2, r0
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	490a      	ldr	r1, [pc, #40]	; (80014a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001478:	5ccb      	ldrb	r3, [r1, r3]
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f918 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000
 800149c:	40021000 	.word	0x40021000
 80014a0:	08002138 	.word	0x08002138
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_RCC_GetSysClockFreq+0x94>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d002      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x30>
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0x36>
 80014da:	e027      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_GetSysClockFreq+0x98>)
 80014de:	613b      	str	r3, [r7, #16]
      break;
 80014e0:	e027      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d010      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_RCC_GetSysClockFreq+0x94>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	0c5b      	lsrs	r3, r3, #17
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_RCC_GetSysClockFreq+0x98>)
 800150e:	fb03 f202 	mul.w	r2, r3, r2
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e004      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	613b      	str	r3, [r7, #16]
      break;
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetSysClockFreq+0x98>)
 800152e:	613b      	str	r3, [r7, #16]
      break;
 8001530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001532:	693b      	ldr	r3, [r7, #16]
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	007a1200 	.word	0x007a1200
 8001548:	08002150 	.word	0x08002150
 800154c:	08002160 	.word	0x08002160
 8001550:	003d0900 	.word	0x003d0900

08001554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_RCC_GetHCLKFreq+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800156c:	f7ff fff2 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	08002148 	.word	0x08002148

08001590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001594:	f7ff ffde 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	4903      	ldr	r1, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	08002148 	.word	0x08002148

080015b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <RCC_Delay+0x34>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <RCC_Delay+0x38>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0a5b      	lsrs	r3, r3, #9
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015d4:	bf00      	nop
  }
  while (Delay --);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	60fa      	str	r2, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <RCC_Delay+0x1c>
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000000 	.word	0x20000000
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e042      	b.n	800168c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7fe fefc 	bl	8000418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2224      	movs	r2, #36	; 0x24
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f82b 	bl	8001694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800164c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800165c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800166c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016ce:	f023 030c 	bic.w	r3, r3, #12
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	430b      	orrs	r3, r1
 80016da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <UART_SetConfig+0x114>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d103      	bne.n	8001704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016fc:	f7ff ff48 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	e002      	b.n	800170a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001704:	f7ff ff30 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8001708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009a      	lsls	r2, r3, #2
 8001714:	441a      	add	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <UART_SetConfig+0x118>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	0119      	lsls	r1, r3, #4
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009a      	lsls	r2, r3, #2
 8001734:	441a      	add	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <UART_SetConfig+0x118>)
 8001742:	fba3 0302 	umull	r0, r3, r3, r2
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2064      	movs	r0, #100	; 0x64
 800174a:	fb00 f303 	mul.w	r3, r0, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	3332      	adds	r3, #50	; 0x32
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <UART_SetConfig+0x118>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001760:	4419      	add	r1, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009a      	lsls	r2, r3, #2
 800176c:	441a      	add	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fbb2 f2f3 	udiv	r2, r2, r3
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <UART_SetConfig+0x118>)
 800177a:	fba3 0302 	umull	r0, r3, r3, r2
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	fb00 f303 	mul.w	r3, r0, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	3332      	adds	r3, #50	; 0x32
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <UART_SetConfig+0x118>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	f003 020f 	and.w	r2, r3, #15
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	440a      	add	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013800 	.word	0x40013800
 80017ac:	51eb851f 	.word	0x51eb851f

080017b0 <std>:
 80017b0:	2300      	movs	r3, #0
 80017b2:	b510      	push	{r4, lr}
 80017b4:	4604      	mov	r4, r0
 80017b6:	e9c0 3300 	strd	r3, r3, [r0]
 80017ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017be:	6083      	str	r3, [r0, #8]
 80017c0:	8181      	strh	r1, [r0, #12]
 80017c2:	6643      	str	r3, [r0, #100]	; 0x64
 80017c4:	81c2      	strh	r2, [r0, #14]
 80017c6:	6183      	str	r3, [r0, #24]
 80017c8:	4619      	mov	r1, r3
 80017ca:	2208      	movs	r2, #8
 80017cc:	305c      	adds	r0, #92	; 0x5c
 80017ce:	f000 f9e5 	bl	8001b9c <memset>
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <std+0x58>)
 80017d4:	6224      	str	r4, [r4, #32]
 80017d6:	6263      	str	r3, [r4, #36]	; 0x24
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <std+0x5c>)
 80017da:	62a3      	str	r3, [r4, #40]	; 0x28
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <std+0x60>)
 80017de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <std+0x64>)
 80017e2:	6323      	str	r3, [r4, #48]	; 0x30
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <std+0x68>)
 80017e6:	429c      	cmp	r4, r3
 80017e8:	d006      	beq.n	80017f8 <std+0x48>
 80017ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80017ee:	4294      	cmp	r4, r2
 80017f0:	d002      	beq.n	80017f8 <std+0x48>
 80017f2:	33d0      	adds	r3, #208	; 0xd0
 80017f4:	429c      	cmp	r4, r3
 80017f6:	d105      	bne.n	8001804 <std+0x54>
 80017f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f000 ba44 	b.w	8001c8c <__retarget_lock_init_recursive>
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	080019ed 	.word	0x080019ed
 800180c:	08001a0f 	.word	0x08001a0f
 8001810:	08001a47 	.word	0x08001a47
 8001814:	08001a6b 	.word	0x08001a6b
 8001818:	200000d4 	.word	0x200000d4

0800181c <stdio_exit_handler>:
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <stdio_exit_handler+0xc>)
 800181e:	4903      	ldr	r1, [pc, #12]	; (800182c <stdio_exit_handler+0x10>)
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <stdio_exit_handler+0x14>)
 8001822:	f000 b869 	b.w	80018f8 <_fwalk_sglue>
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c
 800182c:	08001f81 	.word	0x08001f81
 8001830:	20000018 	.word	0x20000018

08001834 <cleanup_stdio>:
 8001834:	6841      	ldr	r1, [r0, #4]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <cleanup_stdio+0x34>)
 8001838:	b510      	push	{r4, lr}
 800183a:	4299      	cmp	r1, r3
 800183c:	4604      	mov	r4, r0
 800183e:	d001      	beq.n	8001844 <cleanup_stdio+0x10>
 8001840:	f000 fb9e 	bl	8001f80 <_fflush_r>
 8001844:	68a1      	ldr	r1, [r4, #8]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <cleanup_stdio+0x38>)
 8001848:	4299      	cmp	r1, r3
 800184a:	d002      	beq.n	8001852 <cleanup_stdio+0x1e>
 800184c:	4620      	mov	r0, r4
 800184e:	f000 fb97 	bl	8001f80 <_fflush_r>
 8001852:	68e1      	ldr	r1, [r4, #12]
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <cleanup_stdio+0x3c>)
 8001856:	4299      	cmp	r1, r3
 8001858:	d004      	beq.n	8001864 <cleanup_stdio+0x30>
 800185a:	4620      	mov	r0, r4
 800185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001860:	f000 bb8e 	b.w	8001f80 <_fflush_r>
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	200000d4 	.word	0x200000d4
 800186c:	2000013c 	.word	0x2000013c
 8001870:	200001a4 	.word	0x200001a4

08001874 <global_stdio_init.part.0>:
 8001874:	b510      	push	{r4, lr}
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <global_stdio_init.part.0+0x30>)
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <global_stdio_init.part.0+0x34>)
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <global_stdio_init.part.0+0x38>)
 800187c:	4620      	mov	r0, r4
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	2104      	movs	r1, #4
 8001882:	2200      	movs	r2, #0
 8001884:	f7ff ff94 	bl	80017b0 <std>
 8001888:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800188c:	2201      	movs	r2, #1
 800188e:	2109      	movs	r1, #9
 8001890:	f7ff ff8e 	bl	80017b0 <std>
 8001894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001898:	2202      	movs	r2, #2
 800189a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800189e:	2112      	movs	r1, #18
 80018a0:	f7ff bf86 	b.w	80017b0 <std>
 80018a4:	2000020c 	.word	0x2000020c
 80018a8:	200000d4 	.word	0x200000d4
 80018ac:	0800181d 	.word	0x0800181d

080018b0 <__sfp_lock_acquire>:
 80018b0:	4801      	ldr	r0, [pc, #4]	; (80018b8 <__sfp_lock_acquire+0x8>)
 80018b2:	f000 b9ec 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 80018b6:	bf00      	nop
 80018b8:	20000215 	.word	0x20000215

080018bc <__sfp_lock_release>:
 80018bc:	4801      	ldr	r0, [pc, #4]	; (80018c4 <__sfp_lock_release+0x8>)
 80018be:	f000 b9e7 	b.w	8001c90 <__retarget_lock_release_recursive>
 80018c2:	bf00      	nop
 80018c4:	20000215 	.word	0x20000215

080018c8 <__sinit>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	4604      	mov	r4, r0
 80018cc:	f7ff fff0 	bl	80018b0 <__sfp_lock_acquire>
 80018d0:	6a23      	ldr	r3, [r4, #32]
 80018d2:	b11b      	cbz	r3, 80018dc <__sinit+0x14>
 80018d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018d8:	f7ff bff0 	b.w	80018bc <__sfp_lock_release>
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__sinit+0x28>)
 80018de:	6223      	str	r3, [r4, #32]
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__sinit+0x2c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f5      	bne.n	80018d4 <__sinit+0xc>
 80018e8:	f7ff ffc4 	bl	8001874 <global_stdio_init.part.0>
 80018ec:	e7f2      	b.n	80018d4 <__sinit+0xc>
 80018ee:	bf00      	nop
 80018f0:	08001835 	.word	0x08001835
 80018f4:	2000020c 	.word	0x2000020c

080018f8 <_fwalk_sglue>:
 80018f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018fc:	4607      	mov	r7, r0
 80018fe:	4688      	mov	r8, r1
 8001900:	4614      	mov	r4, r2
 8001902:	2600      	movs	r6, #0
 8001904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001908:	f1b9 0901 	subs.w	r9, r9, #1
 800190c:	d505      	bpl.n	800191a <_fwalk_sglue+0x22>
 800190e:	6824      	ldr	r4, [r4, #0]
 8001910:	2c00      	cmp	r4, #0
 8001912:	d1f7      	bne.n	8001904 <_fwalk_sglue+0xc>
 8001914:	4630      	mov	r0, r6
 8001916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d907      	bls.n	8001930 <_fwalk_sglue+0x38>
 8001920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001924:	3301      	adds	r3, #1
 8001926:	d003      	beq.n	8001930 <_fwalk_sglue+0x38>
 8001928:	4629      	mov	r1, r5
 800192a:	4638      	mov	r0, r7
 800192c:	47c0      	blx	r8
 800192e:	4306      	orrs	r6, r0
 8001930:	3568      	adds	r5, #104	; 0x68
 8001932:	e7e9      	b.n	8001908 <_fwalk_sglue+0x10>

08001934 <_puts_r>:
 8001934:	6a03      	ldr	r3, [r0, #32]
 8001936:	b570      	push	{r4, r5, r6, lr}
 8001938:	4605      	mov	r5, r0
 800193a:	460e      	mov	r6, r1
 800193c:	6884      	ldr	r4, [r0, #8]
 800193e:	b90b      	cbnz	r3, 8001944 <_puts_r+0x10>
 8001940:	f7ff ffc2 	bl	80018c8 <__sinit>
 8001944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001946:	07db      	lsls	r3, r3, #31
 8001948:	d405      	bmi.n	8001956 <_puts_r+0x22>
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	0598      	lsls	r0, r3, #22
 800194e:	d402      	bmi.n	8001956 <_puts_r+0x22>
 8001950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001952:	f000 f99c 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	0719      	lsls	r1, r3, #28
 800195a:	d513      	bpl.n	8001984 <_puts_r+0x50>
 800195c:	6923      	ldr	r3, [r4, #16]
 800195e:	b18b      	cbz	r3, 8001984 <_puts_r+0x50>
 8001960:	3e01      	subs	r6, #1
 8001962:	68a3      	ldr	r3, [r4, #8]
 8001964:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001968:	3b01      	subs	r3, #1
 800196a:	60a3      	str	r3, [r4, #8]
 800196c:	b9e9      	cbnz	r1, 80019aa <_puts_r+0x76>
 800196e:	2b00      	cmp	r3, #0
 8001970:	da2e      	bge.n	80019d0 <_puts_r+0x9c>
 8001972:	4622      	mov	r2, r4
 8001974:	210a      	movs	r1, #10
 8001976:	4628      	mov	r0, r5
 8001978:	f000 f87b 	bl	8001a72 <__swbuf_r>
 800197c:	3001      	adds	r0, #1
 800197e:	d007      	beq.n	8001990 <_puts_r+0x5c>
 8001980:	250a      	movs	r5, #10
 8001982:	e007      	b.n	8001994 <_puts_r+0x60>
 8001984:	4621      	mov	r1, r4
 8001986:	4628      	mov	r0, r5
 8001988:	f000 f8b0 	bl	8001aec <__swsetup_r>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0e7      	beq.n	8001960 <_puts_r+0x2c>
 8001990:	f04f 35ff 	mov.w	r5, #4294967295
 8001994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001996:	07da      	lsls	r2, r3, #31
 8001998:	d405      	bmi.n	80019a6 <_puts_r+0x72>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	059b      	lsls	r3, r3, #22
 800199e:	d402      	bmi.n	80019a6 <_puts_r+0x72>
 80019a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019a2:	f000 f975 	bl	8001c90 <__retarget_lock_release_recursive>
 80019a6:	4628      	mov	r0, r5
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da04      	bge.n	80019b8 <_puts_r+0x84>
 80019ae:	69a2      	ldr	r2, [r4, #24]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dc06      	bgt.n	80019c2 <_puts_r+0x8e>
 80019b4:	290a      	cmp	r1, #10
 80019b6:	d004      	beq.n	80019c2 <_puts_r+0x8e>
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	6022      	str	r2, [r4, #0]
 80019be:	7019      	strb	r1, [r3, #0]
 80019c0:	e7cf      	b.n	8001962 <_puts_r+0x2e>
 80019c2:	4622      	mov	r2, r4
 80019c4:	4628      	mov	r0, r5
 80019c6:	f000 f854 	bl	8001a72 <__swbuf_r>
 80019ca:	3001      	adds	r0, #1
 80019cc:	d1c9      	bne.n	8001962 <_puts_r+0x2e>
 80019ce:	e7df      	b.n	8001990 <_puts_r+0x5c>
 80019d0:	250a      	movs	r5, #10
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	6022      	str	r2, [r4, #0]
 80019d8:	701d      	strb	r5, [r3, #0]
 80019da:	e7db      	b.n	8001994 <_puts_r+0x60>

080019dc <puts>:
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <puts+0xc>)
 80019de:	4601      	mov	r1, r0
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	f7ff bfa7 	b.w	8001934 <_puts_r>
 80019e6:	bf00      	nop
 80019e8:	20000064 	.word	0x20000064

080019ec <__sread>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	460c      	mov	r4, r1
 80019f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f4:	f000 f8fc 	bl	8001bf0 <_read_r>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	bfab      	itete	ge
 80019fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80019fe:	89a3      	ldrhlt	r3, [r4, #12]
 8001a00:	181b      	addge	r3, r3, r0
 8001a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a06:	bfac      	ite	ge
 8001a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a0a:	81a3      	strhlt	r3, [r4, #12]
 8001a0c:	bd10      	pop	{r4, pc}

08001a0e <__swrite>:
 8001a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	461f      	mov	r7, r3
 8001a14:	898b      	ldrh	r3, [r1, #12]
 8001a16:	4605      	mov	r5, r0
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	d505      	bpl.n	8001a2c <__swrite+0x1e>
 8001a20:	2302      	movs	r3, #2
 8001a22:	2200      	movs	r2, #0
 8001a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a28:	f000 f8d0 	bl	8001bcc <_lseek_r>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	4632      	mov	r2, r6
 8001a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a34:	81a3      	strh	r3, [r4, #12]
 8001a36:	4628      	mov	r0, r5
 8001a38:	463b      	mov	r3, r7
 8001a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a42:	f000 b8e7 	b.w	8001c14 <_write_r>

08001a46 <__sseek>:
 8001a46:	b510      	push	{r4, lr}
 8001a48:	460c      	mov	r4, r1
 8001a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a4e:	f000 f8bd 	bl	8001bcc <_lseek_r>
 8001a52:	1c43      	adds	r3, r0, #1
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	bf15      	itete	ne
 8001a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a62:	81a3      	strheq	r3, [r4, #12]
 8001a64:	bf18      	it	ne
 8001a66:	81a3      	strhne	r3, [r4, #12]
 8001a68:	bd10      	pop	{r4, pc}

08001a6a <__sclose>:
 8001a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6e:	f000 b89d 	b.w	8001bac <_close_r>

08001a72 <__swbuf_r>:
 8001a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a74:	460e      	mov	r6, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	4605      	mov	r5, r0
 8001a7a:	b118      	cbz	r0, 8001a84 <__swbuf_r+0x12>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <__swbuf_r+0x12>
 8001a80:	f7ff ff22 	bl	80018c8 <__sinit>
 8001a84:	69a3      	ldr	r3, [r4, #24]
 8001a86:	60a3      	str	r3, [r4, #8]
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	071a      	lsls	r2, r3, #28
 8001a8c:	d525      	bpl.n	8001ada <__swbuf_r+0x68>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	b31b      	cbz	r3, 8001ada <__swbuf_r+0x68>
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	6922      	ldr	r2, [r4, #16]
 8001a96:	b2f6      	uxtb	r6, r6
 8001a98:	1a98      	subs	r0, r3, r2
 8001a9a:	6963      	ldr	r3, [r4, #20]
 8001a9c:	4637      	mov	r7, r6
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	dc04      	bgt.n	8001aac <__swbuf_r+0x3a>
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f000 fa6b 	bl	8001f80 <_fflush_r>
 8001aaa:	b9e0      	cbnz	r0, 8001ae6 <__swbuf_r+0x74>
 8001aac:	68a3      	ldr	r3, [r4, #8]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60a3      	str	r3, [r4, #8]
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	6022      	str	r2, [r4, #0]
 8001ab8:	701e      	strb	r6, [r3, #0]
 8001aba:	6962      	ldr	r2, [r4, #20]
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d004      	beq.n	8001acc <__swbuf_r+0x5a>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	07db      	lsls	r3, r3, #31
 8001ac6:	d506      	bpl.n	8001ad6 <__swbuf_r+0x64>
 8001ac8:	2e0a      	cmp	r6, #10
 8001aca:	d104      	bne.n	8001ad6 <__swbuf_r+0x64>
 8001acc:	4621      	mov	r1, r4
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 fa56 	bl	8001f80 <_fflush_r>
 8001ad4:	b938      	cbnz	r0, 8001ae6 <__swbuf_r+0x74>
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ada:	4621      	mov	r1, r4
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 f805 	bl	8001aec <__swsetup_r>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d0d5      	beq.n	8001a92 <__swbuf_r+0x20>
 8001ae6:	f04f 37ff 	mov.w	r7, #4294967295
 8001aea:	e7f4      	b.n	8001ad6 <__swbuf_r+0x64>

08001aec <__swsetup_r>:
 8001aec:	b538      	push	{r3, r4, r5, lr}
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <__swsetup_r+0xac>)
 8001af0:	4605      	mov	r5, r0
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	460c      	mov	r4, r1
 8001af6:	b118      	cbz	r0, 8001b00 <__swsetup_r+0x14>
 8001af8:	6a03      	ldr	r3, [r0, #32]
 8001afa:	b90b      	cbnz	r3, 8001b00 <__swsetup_r+0x14>
 8001afc:	f7ff fee4 	bl	80018c8 <__sinit>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b06:	0718      	lsls	r0, r3, #28
 8001b08:	d422      	bmi.n	8001b50 <__swsetup_r+0x64>
 8001b0a:	06d9      	lsls	r1, r3, #27
 8001b0c:	d407      	bmi.n	8001b1e <__swsetup_r+0x32>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b16:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1a:	81a3      	strh	r3, [r4, #12]
 8001b1c:	e034      	b.n	8001b88 <__swsetup_r+0x9c>
 8001b1e:	0758      	lsls	r0, r3, #29
 8001b20:	d512      	bpl.n	8001b48 <__swsetup_r+0x5c>
 8001b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b24:	b141      	cbz	r1, 8001b38 <__swsetup_r+0x4c>
 8001b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b2a:	4299      	cmp	r1, r3
 8001b2c:	d002      	beq.n	8001b34 <__swsetup_r+0x48>
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 f8b0 	bl	8001c94 <_free_r>
 8001b34:	2300      	movs	r3, #0
 8001b36:	6363      	str	r3, [r4, #52]	; 0x34
 8001b38:	89a3      	ldrh	r3, [r4, #12]
 8001b3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b3e:	81a3      	strh	r3, [r4, #12]
 8001b40:	2300      	movs	r3, #0
 8001b42:	6063      	str	r3, [r4, #4]
 8001b44:	6923      	ldr	r3, [r4, #16]
 8001b46:	6023      	str	r3, [r4, #0]
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	81a3      	strh	r3, [r4, #12]
 8001b50:	6923      	ldr	r3, [r4, #16]
 8001b52:	b94b      	cbnz	r3, 8001b68 <__swsetup_r+0x7c>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5e:	d003      	beq.n	8001b68 <__swsetup_r+0x7c>
 8001b60:	4621      	mov	r1, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 fa59 	bl	800201a <__smakebuf_r>
 8001b68:	89a0      	ldrh	r0, [r4, #12]
 8001b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b6e:	f010 0301 	ands.w	r3, r0, #1
 8001b72:	d00a      	beq.n	8001b8a <__swsetup_r+0x9e>
 8001b74:	2300      	movs	r3, #0
 8001b76:	60a3      	str	r3, [r4, #8]
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	425b      	negs	r3, r3
 8001b7c:	61a3      	str	r3, [r4, #24]
 8001b7e:	6923      	ldr	r3, [r4, #16]
 8001b80:	b943      	cbnz	r3, 8001b94 <__swsetup_r+0xa8>
 8001b82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b86:	d1c4      	bne.n	8001b12 <__swsetup_r+0x26>
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
 8001b8a:	0781      	lsls	r1, r0, #30
 8001b8c:	bf58      	it	pl
 8001b8e:	6963      	ldrpl	r3, [r4, #20]
 8001b90:	60a3      	str	r3, [r4, #8]
 8001b92:	e7f4      	b.n	8001b7e <__swsetup_r+0x92>
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7f7      	b.n	8001b88 <__swsetup_r+0x9c>
 8001b98:	20000064 	.word	0x20000064

08001b9c <memset>:
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4402      	add	r2, r0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <memset+0xa>
 8001ba4:	4770      	bx	lr
 8001ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8001baa:	e7f9      	b.n	8001ba0 <memset+0x4>

08001bac <_close_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	2300      	movs	r3, #0
 8001bb0:	4d05      	ldr	r5, [pc, #20]	; (8001bc8 <_close_r+0x1c>)
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	602b      	str	r3, [r5, #0]
 8001bb8:	f7fe fcd8 	bl	800056c <_close>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_close_r+0x1a>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_close_r+0x1a>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000210 	.word	0x20000210

08001bcc <_lseek_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4d05      	ldr	r5, [pc, #20]	; (8001bec <_lseek_r+0x20>)
 8001bd8:	602a      	str	r2, [r5, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f7fe fcea 	bl	80005b4 <_lseek>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_lseek_r+0x1e>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_lseek_r+0x1e>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	20000210 	.word	0x20000210

08001bf0 <_read_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4d05      	ldr	r5, [pc, #20]	; (8001c10 <_read_r+0x20>)
 8001bfc:	602a      	str	r2, [r5, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7fe fc7b 	bl	80004fa <_read>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_read_r+0x1e>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_read_r+0x1e>
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	20000210 	.word	0x20000210

08001c14 <_write_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4604      	mov	r4, r0
 8001c18:	4608      	mov	r0, r1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4d05      	ldr	r5, [pc, #20]	; (8001c34 <_write_r+0x20>)
 8001c20:	602a      	str	r2, [r5, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7fe fc86 	bl	8000534 <_write>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_write_r+0x1e>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_write_r+0x1e>
 8001c30:	6023      	str	r3, [r4, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	20000210 	.word	0x20000210

08001c38 <__errno>:
 8001c38:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <__errno+0x8>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000064 	.word	0x20000064

08001c44 <__libc_init_array>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	2600      	movs	r6, #0
 8001c48:	4d0c      	ldr	r5, [pc, #48]	; (8001c7c <__libc_init_array+0x38>)
 8001c4a:	4c0d      	ldr	r4, [pc, #52]	; (8001c80 <__libc_init_array+0x3c>)
 8001c4c:	1b64      	subs	r4, r4, r5
 8001c4e:	10a4      	asrs	r4, r4, #2
 8001c50:	42a6      	cmp	r6, r4
 8001c52:	d109      	bne.n	8001c68 <__libc_init_array+0x24>
 8001c54:	f000 fa50 	bl	80020f8 <_init>
 8001c58:	2600      	movs	r6, #0
 8001c5a:	4d0a      	ldr	r5, [pc, #40]	; (8001c84 <__libc_init_array+0x40>)
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <__libc_init_array+0x44>)
 8001c5e:	1b64      	subs	r4, r4, r5
 8001c60:	10a4      	asrs	r4, r4, #2
 8001c62:	42a6      	cmp	r6, r4
 8001c64:	d105      	bne.n	8001c72 <__libc_init_array+0x2e>
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6c:	4798      	blx	r3
 8001c6e:	3601      	adds	r6, #1
 8001c70:	e7ee      	b.n	8001c50 <__libc_init_array+0xc>
 8001c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c76:	4798      	blx	r3
 8001c78:	3601      	adds	r6, #1
 8001c7a:	e7f2      	b.n	8001c62 <__libc_init_array+0x1e>
 8001c7c:	08002164 	.word	0x08002164
 8001c80:	08002164 	.word	0x08002164
 8001c84:	08002164 	.word	0x08002164
 8001c88:	08002168 	.word	0x08002168

08001c8c <__retarget_lock_init_recursive>:
 8001c8c:	4770      	bx	lr

08001c8e <__retarget_lock_acquire_recursive>:
 8001c8e:	4770      	bx	lr

08001c90 <__retarget_lock_release_recursive>:
 8001c90:	4770      	bx	lr
	...

08001c94 <_free_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4605      	mov	r5, r0
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d040      	beq.n	8001d1e <_free_r+0x8a>
 8001c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bfb8      	it	lt
 8001ca6:	18e4      	addlt	r4, r4, r3
 8001ca8:	f000 f8dc 	bl	8001e64 <__malloc_lock>
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <_free_r+0x8c>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	b933      	cbnz	r3, 8001cc0 <_free_r+0x2c>
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	6014      	str	r4, [r2, #0]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cbc:	f000 b8d8 	b.w	8001e70 <__malloc_unlock>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d908      	bls.n	8001cd6 <_free_r+0x42>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	bf01      	itttt	eq
 8001ccc:	6819      	ldreq	r1, [r3, #0]
 8001cce:	685b      	ldreq	r3, [r3, #4]
 8001cd0:	1809      	addeq	r1, r1, r0
 8001cd2:	6021      	streq	r1, [r4, #0]
 8001cd4:	e7ed      	b.n	8001cb2 <_free_r+0x1e>
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b10b      	cbz	r3, 8001ce0 <_free_r+0x4c>
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	d9fa      	bls.n	8001cd6 <_free_r+0x42>
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	1850      	adds	r0, r2, r1
 8001ce4:	42a0      	cmp	r0, r4
 8001ce6:	d10b      	bne.n	8001d00 <_free_r+0x6c>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	4401      	add	r1, r0
 8001cec:	1850      	adds	r0, r2, r1
 8001cee:	4283      	cmp	r3, r0
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	d1e0      	bne.n	8001cb6 <_free_r+0x22>
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4408      	add	r0, r1
 8001cfa:	6010      	str	r0, [r2, #0]
 8001cfc:	6053      	str	r3, [r2, #4]
 8001cfe:	e7da      	b.n	8001cb6 <_free_r+0x22>
 8001d00:	d902      	bls.n	8001d08 <_free_r+0x74>
 8001d02:	230c      	movs	r3, #12
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	e7d6      	b.n	8001cb6 <_free_r+0x22>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	1821      	adds	r1, r4, r0
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	bf01      	itttt	eq
 8001d10:	6819      	ldreq	r1, [r3, #0]
 8001d12:	685b      	ldreq	r3, [r3, #4]
 8001d14:	1809      	addeq	r1, r1, r0
 8001d16:	6021      	streq	r1, [r4, #0]
 8001d18:	6063      	str	r3, [r4, #4]
 8001d1a:	6054      	str	r4, [r2, #4]
 8001d1c:	e7cb      	b.n	8001cb6 <_free_r+0x22>
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	20000218 	.word	0x20000218

08001d24 <sbrk_aligned>:
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	4e0e      	ldr	r6, [pc, #56]	; (8001d60 <sbrk_aligned+0x3c>)
 8001d28:	460c      	mov	r4, r1
 8001d2a:	6831      	ldr	r1, [r6, #0]
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	b911      	cbnz	r1, 8001d36 <sbrk_aligned+0x12>
 8001d30:	f000 f9d2 	bl	80020d8 <_sbrk_r>
 8001d34:	6030      	str	r0, [r6, #0]
 8001d36:	4621      	mov	r1, r4
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f000 f9cd 	bl	80020d8 <_sbrk_r>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	d00a      	beq.n	8001d58 <sbrk_aligned+0x34>
 8001d42:	1cc4      	adds	r4, r0, #3
 8001d44:	f024 0403 	bic.w	r4, r4, #3
 8001d48:	42a0      	cmp	r0, r4
 8001d4a:	d007      	beq.n	8001d5c <sbrk_aligned+0x38>
 8001d4c:	1a21      	subs	r1, r4, r0
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 f9c2 	bl	80020d8 <_sbrk_r>
 8001d54:	3001      	adds	r0, #1
 8001d56:	d101      	bne.n	8001d5c <sbrk_aligned+0x38>
 8001d58:	f04f 34ff 	mov.w	r4, #4294967295
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
 8001d60:	2000021c 	.word	0x2000021c

08001d64 <_malloc_r>:
 8001d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d68:	1ccd      	adds	r5, r1, #3
 8001d6a:	f025 0503 	bic.w	r5, r5, #3
 8001d6e:	3508      	adds	r5, #8
 8001d70:	2d0c      	cmp	r5, #12
 8001d72:	bf38      	it	cc
 8001d74:	250c      	movcc	r5, #12
 8001d76:	2d00      	cmp	r5, #0
 8001d78:	4607      	mov	r7, r0
 8001d7a:	db01      	blt.n	8001d80 <_malloc_r+0x1c>
 8001d7c:	42a9      	cmp	r1, r5
 8001d7e:	d905      	bls.n	8001d8c <_malloc_r+0x28>
 8001d80:	230c      	movs	r3, #12
 8001d82:	2600      	movs	r6, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4630      	mov	r0, r6
 8001d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001e60 <_malloc_r+0xfc>
 8001d90:	f000 f868 	bl	8001e64 <__malloc_lock>
 8001d94:	f8d8 3000 	ldr.w	r3, [r8]
 8001d98:	461c      	mov	r4, r3
 8001d9a:	bb5c      	cbnz	r4, 8001df4 <_malloc_r+0x90>
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	4638      	mov	r0, r7
 8001da0:	f7ff ffc0 	bl	8001d24 <sbrk_aligned>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	4604      	mov	r4, r0
 8001da8:	d155      	bne.n	8001e56 <_malloc_r+0xf2>
 8001daa:	f8d8 4000 	ldr.w	r4, [r8]
 8001dae:	4626      	mov	r6, r4
 8001db0:	2e00      	cmp	r6, #0
 8001db2:	d145      	bne.n	8001e40 <_malloc_r+0xdc>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d048      	beq.n	8001e4a <_malloc_r+0xe6>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	4631      	mov	r1, r6
 8001dbc:	4638      	mov	r0, r7
 8001dbe:	eb04 0903 	add.w	r9, r4, r3
 8001dc2:	f000 f989 	bl	80020d8 <_sbrk_r>
 8001dc6:	4581      	cmp	r9, r0
 8001dc8:	d13f      	bne.n	8001e4a <_malloc_r+0xe6>
 8001dca:	6821      	ldr	r1, [r4, #0]
 8001dcc:	4638      	mov	r0, r7
 8001dce:	1a6d      	subs	r5, r5, r1
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7ff ffa7 	bl	8001d24 <sbrk_aligned>
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	d037      	beq.n	8001e4a <_malloc_r+0xe6>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	442b      	add	r3, r5
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	f8d8 3000 	ldr.w	r3, [r8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d038      	beq.n	8001e5a <_malloc_r+0xf6>
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	42a2      	cmp	r2, r4
 8001dec:	d12b      	bne.n	8001e46 <_malloc_r+0xe2>
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	e00f      	b.n	8001e14 <_malloc_r+0xb0>
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	1b52      	subs	r2, r2, r5
 8001df8:	d41f      	bmi.n	8001e3a <_malloc_r+0xd6>
 8001dfa:	2a0b      	cmp	r2, #11
 8001dfc:	d917      	bls.n	8001e2e <_malloc_r+0xca>
 8001dfe:	1961      	adds	r1, r4, r5
 8001e00:	42a3      	cmp	r3, r4
 8001e02:	6025      	str	r5, [r4, #0]
 8001e04:	bf18      	it	ne
 8001e06:	6059      	strne	r1, [r3, #4]
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	bf08      	it	eq
 8001e0c:	f8c8 1000 	streq.w	r1, [r8]
 8001e10:	5162      	str	r2, [r4, r5]
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	4638      	mov	r0, r7
 8001e16:	f104 060b 	add.w	r6, r4, #11
 8001e1a:	f000 f829 	bl	8001e70 <__malloc_unlock>
 8001e1e:	f026 0607 	bic.w	r6, r6, #7
 8001e22:	1d23      	adds	r3, r4, #4
 8001e24:	1af2      	subs	r2, r6, r3
 8001e26:	d0ae      	beq.n	8001d86 <_malloc_r+0x22>
 8001e28:	1b9b      	subs	r3, r3, r6
 8001e2a:	50a3      	str	r3, [r4, r2]
 8001e2c:	e7ab      	b.n	8001d86 <_malloc_r+0x22>
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	6862      	ldr	r2, [r4, #4]
 8001e32:	d1dd      	bne.n	8001df0 <_malloc_r+0x8c>
 8001e34:	f8c8 2000 	str.w	r2, [r8]
 8001e38:	e7ec      	b.n	8001e14 <_malloc_r+0xb0>
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	6864      	ldr	r4, [r4, #4]
 8001e3e:	e7ac      	b.n	8001d9a <_malloc_r+0x36>
 8001e40:	4634      	mov	r4, r6
 8001e42:	6876      	ldr	r6, [r6, #4]
 8001e44:	e7b4      	b.n	8001db0 <_malloc_r+0x4c>
 8001e46:	4613      	mov	r3, r2
 8001e48:	e7cc      	b.n	8001de4 <_malloc_r+0x80>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	f000 f80e 	bl	8001e70 <__malloc_unlock>
 8001e54:	e797      	b.n	8001d86 <_malloc_r+0x22>
 8001e56:	6025      	str	r5, [r4, #0]
 8001e58:	e7dc      	b.n	8001e14 <_malloc_r+0xb0>
 8001e5a:	605b      	str	r3, [r3, #4]
 8001e5c:	deff      	udf	#255	; 0xff
 8001e5e:	bf00      	nop
 8001e60:	20000218 	.word	0x20000218

08001e64 <__malloc_lock>:
 8001e64:	4801      	ldr	r0, [pc, #4]	; (8001e6c <__malloc_lock+0x8>)
 8001e66:	f7ff bf12 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 8001e6a:	bf00      	nop
 8001e6c:	20000214 	.word	0x20000214

08001e70 <__malloc_unlock>:
 8001e70:	4801      	ldr	r0, [pc, #4]	; (8001e78 <__malloc_unlock+0x8>)
 8001e72:	f7ff bf0d 	b.w	8001c90 <__retarget_lock_release_recursive>
 8001e76:	bf00      	nop
 8001e78:	20000214 	.word	0x20000214

08001e7c <__sflush_r>:
 8001e7c:	898a      	ldrh	r2, [r1, #12]
 8001e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e80:	4605      	mov	r5, r0
 8001e82:	0710      	lsls	r0, r2, #28
 8001e84:	460c      	mov	r4, r1
 8001e86:	d457      	bmi.n	8001f38 <__sflush_r+0xbc>
 8001e88:	684b      	ldr	r3, [r1, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dc04      	bgt.n	8001e98 <__sflush_r+0x1c>
 8001e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dc01      	bgt.n	8001e98 <__sflush_r+0x1c>
 8001e94:	2000      	movs	r0, #0
 8001e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e9a:	2e00      	cmp	r6, #0
 8001e9c:	d0fa      	beq.n	8001e94 <__sflush_r+0x18>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ea4:	682f      	ldr	r7, [r5, #0]
 8001ea6:	6a21      	ldr	r1, [r4, #32]
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	d032      	beq.n	8001f12 <__sflush_r+0x96>
 8001eac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	075a      	lsls	r2, r3, #29
 8001eb2:	d505      	bpl.n	8001ec0 <__sflush_r+0x44>
 8001eb4:	6863      	ldr	r3, [r4, #4]
 8001eb6:	1ac0      	subs	r0, r0, r3
 8001eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eba:	b10b      	cbz	r3, 8001ec0 <__sflush_r+0x44>
 8001ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ebe:	1ac0      	subs	r0, r0, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	6a21      	ldr	r1, [r4, #32]
 8001eca:	47b0      	blx	r6
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	d106      	bne.n	8001ee0 <__sflush_r+0x64>
 8001ed2:	6829      	ldr	r1, [r5, #0]
 8001ed4:	291d      	cmp	r1, #29
 8001ed6:	d82b      	bhi.n	8001f30 <__sflush_r+0xb4>
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <__sflush_r+0x100>)
 8001eda:	410a      	asrs	r2, r1
 8001edc:	07d6      	lsls	r6, r2, #31
 8001ede:	d427      	bmi.n	8001f30 <__sflush_r+0xb4>
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6062      	str	r2, [r4, #4]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	04d9      	lsls	r1, r3, #19
 8001ee8:	6022      	str	r2, [r4, #0]
 8001eea:	d504      	bpl.n	8001ef6 <__sflush_r+0x7a>
 8001eec:	1c42      	adds	r2, r0, #1
 8001eee:	d101      	bne.n	8001ef4 <__sflush_r+0x78>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b903      	cbnz	r3, 8001ef6 <__sflush_r+0x7a>
 8001ef4:	6560      	str	r0, [r4, #84]	; 0x54
 8001ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ef8:	602f      	str	r7, [r5, #0]
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d0ca      	beq.n	8001e94 <__sflush_r+0x18>
 8001efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f02:	4299      	cmp	r1, r3
 8001f04:	d002      	beq.n	8001f0c <__sflush_r+0x90>
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fec4 	bl	8001c94 <_free_r>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	6360      	str	r0, [r4, #52]	; 0x34
 8001f10:	e7c1      	b.n	8001e96 <__sflush_r+0x1a>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4628      	mov	r0, r5
 8001f16:	47b0      	blx	r6
 8001f18:	1c41      	adds	r1, r0, #1
 8001f1a:	d1c8      	bne.n	8001eae <__sflush_r+0x32>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0c5      	beq.n	8001eae <__sflush_r+0x32>
 8001f22:	2b1d      	cmp	r3, #29
 8001f24:	d001      	beq.n	8001f2a <__sflush_r+0xae>
 8001f26:	2b16      	cmp	r3, #22
 8001f28:	d101      	bne.n	8001f2e <__sflush_r+0xb2>
 8001f2a:	602f      	str	r7, [r5, #0]
 8001f2c:	e7b2      	b.n	8001e94 <__sflush_r+0x18>
 8001f2e:	89a3      	ldrh	r3, [r4, #12]
 8001f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	e7ae      	b.n	8001e96 <__sflush_r+0x1a>
 8001f38:	690f      	ldr	r7, [r1, #16]
 8001f3a:	2f00      	cmp	r7, #0
 8001f3c:	d0aa      	beq.n	8001e94 <__sflush_r+0x18>
 8001f3e:	0793      	lsls	r3, r2, #30
 8001f40:	bf18      	it	ne
 8001f42:	2300      	movne	r3, #0
 8001f44:	680e      	ldr	r6, [r1, #0]
 8001f46:	bf08      	it	eq
 8001f48:	694b      	ldreq	r3, [r1, #20]
 8001f4a:	1bf6      	subs	r6, r6, r7
 8001f4c:	600f      	str	r7, [r1, #0]
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	2e00      	cmp	r6, #0
 8001f52:	dd9f      	ble.n	8001e94 <__sflush_r+0x18>
 8001f54:	4633      	mov	r3, r6
 8001f56:	463a      	mov	r2, r7
 8001f58:	4628      	mov	r0, r5
 8001f5a:	6a21      	ldr	r1, [r4, #32]
 8001f5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001f60:	47e0      	blx	ip
 8001f62:	2800      	cmp	r0, #0
 8001f64:	dc06      	bgt.n	8001f74 <__sflush_r+0xf8>
 8001f66:	89a3      	ldrh	r3, [r4, #12]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f70:	81a3      	strh	r3, [r4, #12]
 8001f72:	e790      	b.n	8001e96 <__sflush_r+0x1a>
 8001f74:	4407      	add	r7, r0
 8001f76:	1a36      	subs	r6, r6, r0
 8001f78:	e7ea      	b.n	8001f50 <__sflush_r+0xd4>
 8001f7a:	bf00      	nop
 8001f7c:	dfbffffe 	.word	0xdfbffffe

08001f80 <_fflush_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	690b      	ldr	r3, [r1, #16]
 8001f84:	4605      	mov	r5, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	b913      	cbnz	r3, 8001f90 <_fflush_r+0x10>
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	b118      	cbz	r0, 8001f9a <_fflush_r+0x1a>
 8001f92:	6a03      	ldr	r3, [r0, #32]
 8001f94:	b90b      	cbnz	r3, 8001f9a <_fflush_r+0x1a>
 8001f96:	f7ff fc97 	bl	80018c8 <__sinit>
 8001f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f3      	beq.n	8001f8a <_fflush_r+0xa>
 8001fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fa4:	07d0      	lsls	r0, r2, #31
 8001fa6:	d404      	bmi.n	8001fb2 <_fflush_r+0x32>
 8001fa8:	0599      	lsls	r1, r3, #22
 8001faa:	d402      	bmi.n	8001fb2 <_fflush_r+0x32>
 8001fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fae:	f7ff fe6e 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	f7ff ff61 	bl	8001e7c <__sflush_r>
 8001fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fbc:	4605      	mov	r5, r0
 8001fbe:	07da      	lsls	r2, r3, #31
 8001fc0:	d4e4      	bmi.n	8001f8c <_fflush_r+0xc>
 8001fc2:	89a3      	ldrh	r3, [r4, #12]
 8001fc4:	059b      	lsls	r3, r3, #22
 8001fc6:	d4e1      	bmi.n	8001f8c <_fflush_r+0xc>
 8001fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fca:	f7ff fe61 	bl	8001c90 <__retarget_lock_release_recursive>
 8001fce:	e7dd      	b.n	8001f8c <_fflush_r+0xc>

08001fd0 <__swhatbuf_r>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd8:	4615      	mov	r5, r2
 8001fda:	2900      	cmp	r1, #0
 8001fdc:	461e      	mov	r6, r3
 8001fde:	b096      	sub	sp, #88	; 0x58
 8001fe0:	da0c      	bge.n	8001ffc <__swhatbuf_r+0x2c>
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fea:	bf0c      	ite	eq
 8001fec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001ff0:	2340      	movne	r3, #64	; 0x40
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	6031      	str	r1, [r6, #0]
 8001ff6:	602b      	str	r3, [r5, #0]
 8001ff8:	b016      	add	sp, #88	; 0x58
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	466a      	mov	r2, sp
 8001ffe:	f000 f849 	bl	8002094 <_fstat_r>
 8002002:	2800      	cmp	r0, #0
 8002004:	dbed      	blt.n	8001fe2 <__swhatbuf_r+0x12>
 8002006:	9901      	ldr	r1, [sp, #4]
 8002008:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800200c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002010:	4259      	negs	r1, r3
 8002012:	4159      	adcs	r1, r3
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	e7eb      	b.n	8001ff2 <__swhatbuf_r+0x22>

0800201a <__smakebuf_r>:
 800201a:	898b      	ldrh	r3, [r1, #12]
 800201c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800201e:	079d      	lsls	r5, r3, #30
 8002020:	4606      	mov	r6, r0
 8002022:	460c      	mov	r4, r1
 8002024:	d507      	bpl.n	8002036 <__smakebuf_r+0x1c>
 8002026:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	6123      	str	r3, [r4, #16]
 800202e:	2301      	movs	r3, #1
 8002030:	6163      	str	r3, [r4, #20]
 8002032:	b002      	add	sp, #8
 8002034:	bd70      	pop	{r4, r5, r6, pc}
 8002036:	466a      	mov	r2, sp
 8002038:	ab01      	add	r3, sp, #4
 800203a:	f7ff ffc9 	bl	8001fd0 <__swhatbuf_r>
 800203e:	9900      	ldr	r1, [sp, #0]
 8002040:	4605      	mov	r5, r0
 8002042:	4630      	mov	r0, r6
 8002044:	f7ff fe8e 	bl	8001d64 <_malloc_r>
 8002048:	b948      	cbnz	r0, 800205e <__smakebuf_r+0x44>
 800204a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800204e:	059a      	lsls	r2, r3, #22
 8002050:	d4ef      	bmi.n	8002032 <__smakebuf_r+0x18>
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	81a3      	strh	r3, [r4, #12]
 800205c:	e7e3      	b.n	8002026 <__smakebuf_r+0xc>
 800205e:	89a3      	ldrh	r3, [r4, #12]
 8002060:	6020      	str	r0, [r4, #0]
 8002062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	9b00      	ldr	r3, [sp, #0]
 800206a:	6120      	str	r0, [r4, #16]
 800206c:	6163      	str	r3, [r4, #20]
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	b15b      	cbz	r3, 800208a <__smakebuf_r+0x70>
 8002072:	4630      	mov	r0, r6
 8002074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002078:	f000 f81e 	bl	80020b8 <_isatty_r>
 800207c:	b128      	cbz	r0, 800208a <__smakebuf_r+0x70>
 800207e:	89a3      	ldrh	r3, [r4, #12]
 8002080:	f023 0303 	bic.w	r3, r3, #3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	81a3      	strh	r3, [r4, #12]
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	431d      	orrs	r5, r3
 800208e:	81a5      	strh	r5, [r4, #12]
 8002090:	e7cf      	b.n	8002032 <__smakebuf_r+0x18>
	...

08002094 <_fstat_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	2300      	movs	r3, #0
 8002098:	4d06      	ldr	r5, [pc, #24]	; (80020b4 <_fstat_r+0x20>)
 800209a:	4604      	mov	r4, r0
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	f7fe fa6e 	bl	8000582 <_fstat>
 80020a6:	1c43      	adds	r3, r0, #1
 80020a8:	d102      	bne.n	80020b0 <_fstat_r+0x1c>
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	b103      	cbz	r3, 80020b0 <_fstat_r+0x1c>
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	bf00      	nop
 80020b4:	20000210 	.word	0x20000210

080020b8 <_isatty_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	2300      	movs	r3, #0
 80020bc:	4d05      	ldr	r5, [pc, #20]	; (80020d4 <_isatty_r+0x1c>)
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	f7fe fa6c 	bl	80005a0 <_isatty>
 80020c8:	1c43      	adds	r3, r0, #1
 80020ca:	d102      	bne.n	80020d2 <_isatty_r+0x1a>
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	b103      	cbz	r3, 80020d2 <_isatty_r+0x1a>
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	20000210 	.word	0x20000210

080020d8 <_sbrk_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	2300      	movs	r3, #0
 80020dc:	4d05      	ldr	r5, [pc, #20]	; (80020f4 <_sbrk_r+0x1c>)
 80020de:	4604      	mov	r4, r0
 80020e0:	4608      	mov	r0, r1
 80020e2:	602b      	str	r3, [r5, #0]
 80020e4:	f7fe fa72 	bl	80005cc <_sbrk>
 80020e8:	1c43      	adds	r3, r0, #1
 80020ea:	d102      	bne.n	80020f2 <_sbrk_r+0x1a>
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	b103      	cbz	r3, 80020f2 <_sbrk_r+0x1a>
 80020f0:	6023      	str	r3, [r4, #0]
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
 80020f4:	20000210 	.word	0x20000210

080020f8 <_init>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr

08002104 <_fini>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr
